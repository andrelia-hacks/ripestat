use serde::{Deserialize, Serialize};

/// RIPEstat data call names
#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum RipeStatDataType {
    AbuseContactFinder,
    AddressSpaceHierarchy,
    AddressSpaceUsage,
    AllocationHistory,
    AnnouncedPrefixes,
    ASOverview,
    ASPathLength,
    ASRoutingConsistency,
    ASNNeighbours,
    ASNNeighboursHistory,
    AtlasProbeDeployment,
    AtlasProbes,
    AtlasTargets,
    BGPState,
    BGPUpdateActivity,
    BGPUpdates,
    BGPlay,
    CountryASNs,
    CountryResourceList,
    CountryResourceStats,
    DNSChain,
    ExampleResources,
    HistoricalWhois,
    IANARegistryInfo,
    LookingGlass,
    MaxmindGeoLite,
    MaxmindGeoLiteAnnouncedByAS,
    MeterNetBandwidthMeasurements,
    MlabActivityCount,
    MlabBandwidth,
    MlabClients,
    NetworkInfo,
    PrefixCount,
    PrefixOverview,
    PrefixRoutingConsistency,
    PrefixSizeDistribution,
    RelatedPrefixes,
    ReverseDNS,
    ReverseDNSConsistency,
    ReverseDNSIP,
    RIR,
    RIRGeo,
    RIRPrefixSizeDistribution,
    RIRStatsCountry,
    RISAsns,
    RISFirstLastSeen,
    RISFullTableThreshold,
    RISPeerCount,
    RISPeerings,
    RISPeers,
    RISPrefixes,
    RoutingHistory,
    RoutingStatus,
    RPKIHistory,
    RPKIValidationStatus,
    RRCInfo,
    Searchcomplete,
    SpeedcheckerBandwidthMeasurements,
    Visibility,
    WhatsMyIp,
    Whois,
    WhoisObjectLastUpdated,
    Zonemaster,
}

impl RipeStatDataType {
    /// Get the URL for the RIPEstat data endpoint
    pub fn url(&self) -> String {
        let api_name: &str = match self {
            Self::AbuseContactFinder => "abuse-contact-finder",
            Self::AddressSpaceHierarchy => "address-space-hierarchy",
            Self::AddressSpaceUsage => "address-space-usage",
            Self::AllocationHistory => "allocation-history",
            Self::AnnouncedPrefixes => "announced-prefixes",
            Self::ASOverview => "as-overview",
            Self::ASPathLength => "as-path-length",
            Self::ASRoutingConsistency => "as-routing-consistency",
            Self::ASNNeighbours => "asn-neighbours",
            Self::ASNNeighboursHistory => "asn-neighbours-history",
            Self::AtlasProbeDeployment => "atlas-probe-deployment",
            Self::AtlasProbes => "atlas-probes",
            Self::AtlasTargets => "atlas-targets",
            Self::BGPState => "bgp-state",
            Self::BGPUpdateActivity => "bgp-update-activity",
            Self::BGPUpdates => "bgp-updates",
            Self::BGPlay => "bgplay",
            Self::CountryASNs => "country-asns",
            Self::CountryResourceList => "country-resource-list",
            Self::CountryResourceStats => "country-resource-stats",
            Self::DNSChain => "dns-chain",
            Self::ExampleResources => "example-resources",
            Self::HistoricalWhois => "historical-whois",
            Self::IANARegistryInfo => "iana-registry-info",
            Self::LookingGlass => "looking-glass",
            Self::MaxmindGeoLite => "maxmind-geo-lite",
            Self::MaxmindGeoLiteAnnouncedByAS => "maxmind-geo-lite-announced-by-as",
            Self::MeterNetBandwidthMeasurements => "meternet-bandwidth-measurements",
            Self::MlabActivityCount => "mlab-activity-count",
            Self::MlabBandwidth => "mlab-bandwidth",
            Self::MlabClients => "mlab-clients",
            Self::NetworkInfo => "network-info",
            Self::PrefixCount => "prefix-count",
            Self::PrefixOverview => "prefix-overview",
            Self::PrefixRoutingConsistency => "prefix-routing-consistency",
            Self::PrefixSizeDistribution => "prefix-size-distribution",
            Self::RelatedPrefixes => "related-prefixes",
            Self::ReverseDNS => "reverse-dns",
            Self::ReverseDNSConsistency => "reverse-dns-consistency",
            Self::ReverseDNSIP => "reverse-dns-ip",
            Self::RIR => "rir",
            Self::RIRGeo => "rir-geo",
            Self::RIRPrefixSizeDistribution => "rir-prefix-size-distribution",
            Self::RIRStatsCountry => "rir-stats-country",
            Self::RISAsns => "ris-asns",
            Self::RISFirstLastSeen => "ris-first-last-seen",
            Self::RISFullTableThreshold => "ris-full-table-threshold",
            Self::RISPeerCount => "ris-peer-count",
            Self::RISPeerings => "ris-peerings",
            Self::RISPeers => "ris-peers",
            Self::RISPrefixes => "ris-prefixes",
            Self::RoutingHistory => "routing-history",
            Self::RoutingStatus => "routing-status",
            Self::RPKIHistory => "rpki-history",
            Self::RPKIValidationStatus => "rpki-validation-status",
            Self::RRCInfo => "rrc-info",
            Self::Searchcomplete => "searchcomplete",
            Self::SpeedcheckerBandwidthMeasurements => "speedchecker-bandwidth-measurements",
            Self::Visibility => "visibility",
            Self::WhatsMyIp => "whats-my-ip",
            Self::Whois => "whois",
            Self::WhoisObjectLastUpdated => "whois-object-last-updated",
            Self::Zonemaster => "zonemaster",
        };
        format!("https://stat.ripe.net/data/{}/data.json", api_name)
    }
}